import os
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    Filters,
    CallbackQueryHandler,
    CallbackContext,
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = """7927337290:AAEnfzGlXmm2KXVw3HwVRXYBZVd26UFrvgo"""
if not TOKEN:
    raise ValueError("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞. –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥—É—ç–ª–µ–π
duels = {}  # –§–æ—Ä–º–∞—Ç: {chat_id: {message_id: {'attacker': user_id, 'defender': user_id, 'status': 'pending/active', 'turn': user_id}}}

def start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    update.message.reply_text(
        "üê∑ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –°–≤–∏–Ω–æ–±–æ–π–Ω—é! üê∑\n\n"
        "–ß—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å –∫–æ–≥–æ-—Ç–æ –Ω–∞ —Å–≤–∏–Ω–æ–±–æ–π–Ω—é, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º '—Å–≤–∏–Ω–æ–±–æ–π'"
    )

def handle_message(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if update.message.reply_to_message and update.message.text.lower() == '—Å–≤–∏–Ω–æ–±–æ–π':
        # –ö—Ç–æ-—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç –Ω–∞ –¥—É—ç–ª—å
        start_duel(update, context)

def start_duel(update: Update, context: CallbackContext) -> None:
    """–ù–∞—á–∞–ª–æ –¥—É—ç–ª–∏"""
    chat_id = update.message.chat_id
    attacker = update.message.from_user
    defender = update.message.reply_to_message.from_user
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–∞–º–æ–≤—ã–∑–æ–≤
    if attacker.id == defender.id:
        update.message.reply_text("–ù–µ–ª—å–∑—è –≤—ã–∑–≤–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è –Ω–∞ —Å–≤–∏–Ω–æ–±–æ–π–Ω—é!")
        return
    
    message_id = update.message.reply_to_message.message_id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –¥—É—ç–ª—å
    if chat_id in duels and message_id in duels[chat_id]:
        update.message.reply_text("–°–≤–∏–Ω–æ–±–æ–π–Ω—è —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å —Å —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º!")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –¥—É—ç–ª–∏
    if chat_id not in duels:
        duels[chat_id] = {}
    
    duels[chat_id][message_id] = {
        'attacker': attacker,
        'defender': defender,
        'status': 'pending',
        'turn': None
    }
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "—Å–≤–∏–Ω–æ–±–æ–π"
    context.bot.delete_message(chat_id, update.message.message_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥—É—ç–ª–∏
    keyboard = [
        [InlineKeyboardButton("–î–∞, —Ö–æ—á—É —Ö—Ä—é–∫–∞—Ç—å!", callback_data=f"duel_accept_{message_id}")],
        [InlineKeyboardButton("–ù–µ—Ç, —è –Ω–µ —Å–≤–∏–Ω—å—è!", callback_data=f"duel_decline_{message_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    context.bot.send_message(
        chat_id=chat_id,
        reply_to_message_id=message_id,
        text=f"üê∑ {defender.first_name}, {attacker.first_name} –≤—ã–∑—ã–≤–∞–µ—Ç –≤–∞—Å –Ω–∞ —Å–≤–∏–Ω–æ–±–æ–π–Ω—é! –ü—Ä–∏–º–µ—Ç–µ –≤—ã–∑–æ–≤?",
        reply_markup=reply_markup
    )

def handle_duel_response(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥—É—ç–ª–∏"""
    query = update.callback_query
    query.answer()
    
    chat_id = query.message.chat_id
    message_id = int(query.data.split('_')[-1])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥—É—ç–ª–∏
    if chat_id not in duels or message_id not in duels[chat_id]:
        query.edit_message_text("–≠—Ç–∞ —Å–≤–∏–Ω–æ–±–æ–π–Ω—è —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return
    
    duel = duels[chat_id][message_id]
    
    if query.data.startswith('duel_accept'):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–Ω—è–ª –¥—É—ç–ª—å
        duel['status'] = 'active'
        duel['turn'] = duel['attacker'].id  # –ü–µ—Ä–≤—ã–º —Ö–æ–¥–∏—Ç –∞—Ç–∞–∫—É—é—â–∏–π
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        query.edit_message_text(
            f"üê∑ {duel['defender'].first_name} —Å–æ–≥–ª–∞—Å–∏–ª—Å—è, –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–≤–∏–Ω–æ–±–æ–π–Ω—è!\n\n"
            f"–ü–µ—Ä–≤—ã–º —Ö—Ä—é–∫–∞–µ—Ç {duel['attacker'].first_name}!"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥—É—ç–ª–∏
        send_duel_buttons(context, chat_id, message_id, duel['attacker'].id)
        
    elif query.data.startswith('duel_decline'):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –¥—É—ç–ª–∏
        query.edit_message_text(
            f"üê∑ {duel['defender'].first_name} –æ—Ç–∫–∞–∑–∞–ª—Å—è –ø–æ—Ö—Ä—é–∫–∞—Ç—å—Å—è...\n"
            f"{duel['attacker'].first_name}, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ –¥—Ä—É–≥–æ–≥–æ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞!"
        )
        del duels[chat_id][message_id]

def send_duel_buttons(context: CallbackContext, chat_id: int, message_id: int, user_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ö–æ–¥–∞ –≤ –¥—É—ç–ª–∏"""
    duel = duels[chat_id][message_id]
    current_player = duel['attacker'] if user_id == duel['attacker'].id else duel['defender']
    opponent = duel['defender'] if user_id == duel['attacker'].id else duel['attacker']
    
    keyboard = [
        [InlineKeyboardButton("üê∑ –•–†–Æ", callback_data=f"action_hryu_{message_id}")],
        [
            InlineKeyboardButton("üß∂ –ü–û–ß–Å–°", callback_data=f"action_scratch_{message_id}"),
            InlineKeyboardButton("üåÄ –£–ö–õ–û–ù", callback_data=f"action_dodge_{message_id}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    context.bot.send_message(
        chat_id=chat_id,
        text=f"üê∑ –•–æ–¥ {current_player.first_name} –ø—Ä–æ—Ç–∏–≤ {opponent.first_name}!",
        reply_markup=reply_markup
    )

def handle_duel_action(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π –≤ –¥—É—ç–ª–∏"""
    query = update.callback_query
    query.answer()
    
    chat_id = query.message.chat_id
    message_id = int(query.data.split('_')[-1])
    action = query.data.split('_')[1]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥—É—ç–ª–∏
    if chat_id not in duels or message_id not in duels[chat_id]:
        query.edit_message_text("–≠—Ç–∞ —Å–≤–∏–Ω–æ–±–æ–π–Ω—è —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å.")
        return
    
    duel = duels[chat_id][message_id]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ–¥ –¥–µ–ª–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–≥—Ä–æ–∫
    current_user = query.from_user
    if current_user.id != duel['turn']:
        query.answer("–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!", show_alert=True)
        return
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–Ω–æ–ø–∫–∏
    context.bot.delete_message(chat_id, query.message.message_id)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    if action == 'hryu':
        # –û–±—ã—á–Ω—ã–π —Ö—Ä—é–∫
        chance = 6
        success = random.randint(1, 100) <= chance
        if success:
            # –ü–æ–±–µ–¥–∞
            winner = current_user
            loser = duel['defender'] if current_user.id == duel['attacker'].id else duel['attacker']
            context.bot.send_message(
                chat_id=chat_id,
                text=f"üê∑ {current_user.first_name} –∑–∞—Ö—Ä—é–∫–∞–ª {loser.first_name} –î–û –°–ú–ï–†–¢–ò! {winner.first_name} –ø–æ–±–µ–¥–∏–ª –≤ —Å–≤–∏–Ω–æ–±–æ–π–Ω–µ! üéâ"
            )
            del duels[chat_id][message_id]
            return
        else:
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥—É—ç–ª—å
            context.bot.send_message(
                chat_id=chat_id,
                text=f"üê∑ {current_user.first_name} —Ö—Ä—é–∫–Ω—É–ª, –Ω–æ {duel['defender'].first_name if current_user.id == duel['attacker'].id else duel['attacker'].first_name} –≤—ã—Å—Ç–æ—è–ª!"
            )
    
    elif action == 'scratch':
        # –ü–æ—á–µ—Å–∞—Ç—å—Å—è - —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —à–∞–Ω—Å –Ω–∞ –ø–æ–±–µ–¥—É –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ö–æ–¥—É
        context.bot.send_message(
            chat_id=chat_id,
            text=f"üß∂ {current_user.first_name} –ø–æ—á–µ—Å–∞–ª—Å—è! –¢–µ–ø–µ—Ä—å –µ–≥–æ —Å–ª–µ–¥—É—é—â–∏–π —Ö—Ä—é–∫ –±—É–¥–µ—Ç —Å —à–∞–Ω—Å–æ–º 14% –Ω–∞ –ø–æ–±–µ–¥—É!"
        )
    
    elif action == 'dodge':
        # –£–∫–ª–æ–Ω–µ–Ω–∏–µ - —É–º–µ–Ω—å—à–∞–µ—Ç —à–∞–Ω—Å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
        context.bot.send_message(
            chat_id=chat_id,
            text=f"üåÄ {current_user.first_name} —É–∫–ª–æ–Ω–∏–ª—Å—è! –¢–µ–ø–µ—Ä—å —à–∞–Ω—Å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ —Ö—Ä—é–∫–Ω—É—Ç—å –µ–≥–æ –¥–æ —Å–º–µ—Ä—Ç–∏ —Å–Ω–∏–∂–µ–Ω –¥–æ 1%!"
        )
    
    # –ú–µ–Ω—è–µ–º —Ö–æ–¥
    duel['turn'] = duel['defender'].id if duel['turn'] == duel['attacker'].id else duel['attacker'].id
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ö–æ–¥–∞
    send_duel_buttons(context, chat_id, message_id, duel['turn'])

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    updater = Updater(TOKEN)
    dispatcher = updater.dispatcher

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dispatcher.add_handler(CommandHandler("start", start))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    dispatcher.add_handler(CallbackQueryHandler(handle_duel_response, pattern='^duel_(accept|decline)'))
    dispatcher.add_handler(CallbackQueryHandler(handle_duel_action, pattern='^action_(hryu|scratch|dodge)'))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
